import React, { useEffect, useState } from 'react';
import './ManageUsersPage.css';

type UserRole = 'customer' | 'agent' | 'admin';

interface User {
  userId: number;
  name: string;
  email: string;
  roles: UserRole[];
}

const ROLES: UserRole[] = ['customer', 'agent', 'admin'];

const ManageUsersPage: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    fetch('http://localhost:8765/api/users', {
      credentials: 'include',
    })
      .then((res) => {
        if (!res.ok) throw new Error('Failed to fetch users');
        return res.json();
      })
      .then(setUsers)
      .catch((err) => setError(err.message))
      .finally(() => setIsLoading(false));
  }, []);

  const handleRoleChange = (userId: number, newRole: UserRole) => {
    const user = users.find(u => u.userId === userId);
    if (!user) return;

    const updatedRoles = [newRole]; // Replace existing roles with the new one for simplicity

    fetch(`http://localhost:8765/api/users/${userId}/roles`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify(updatedRoles),
    })
      .then(res => {
        if (!res.ok) throw new Error('Failed to update role');
        // Reflect changes in UI
        const updated = users.map(u =>
          u.userId === userId ? { ...u, roles: updatedRoles } : u
        );
        setUsers(updated);
      })
      .catch(err => alert(err.message));
  };

  const handleDeleteUser = (userId: number) => {
    if (!window.confirm('Are you sure you want to delete this user?')) return;

    fetch(`http://localhost:8765/api/users/${userId}`, {
      method: 'DELETE',
      credentials: 'include',
    })
      .then(res => {
        if (!res.ok) throw new Error('Failed to delete user');
        setUsers(users.filter(u => u.userId !== userId));
      })
      .catch(err => alert(err.message));
  };

  return (
    <div className="manage-users-container">
      <div className="manage-users-header">
        <h2>User Management</h2>
        <button className="add-user-button" disabled>Add New User</button>
      </div>

      {isLoading ? (
        <div className="loading">Loading Users...</div>
      ) : error ? (
        <p className="error">{error}</p>
      ) : (
        <div className="table-wrapper">
          <table className="user-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th className="text-right">Actions</th>
              </tr>
            </thead>
            <tbody>
              {users.map(user => (
                <tr key={user.userId}>
                  <td>{user.name}</td>
                  <td>{user.email}</td>
                  <td>
                    <select
                      value={user.roles[0]}
                      onChange={(e) =>
                        handleRoleChange(user.userId, e.target.value as UserRole)
                      }
                      disabled={isLoading}
                    >
                      {ROLES.map(role => (
                        <option key={role} value={role}>
                          {role}
                        </option>
                      ))}
                    </select>
                  </td>
                  <td className="text-right">
                    <button disabled className="action-button">Edit</button>
                    <button
                      onClick={() => handleDeleteUser(user.userId)}
                      className="delete-button"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          {users.length === 0 && <p className="no-users">No users found.</p>}
        </div>
      )}
    </div>
  );
};

export default ManageUsersPage;



// GET all users
@GetMapping("/api/users")
public List<User> getAllUsers();

// PUT update roles for a user
@PutMapping("/api/users/{userId}/roles")
public ResponseEntity<?> updateUserRoles(@PathVariable Long userId, @RequestBody Set<Role> roles);

// DELETE a user
@DeleteMapping("/api/users/{userId}")
public ResponseEntity<?> deleteUser(@PathVariable Long userId)




.manage-users-container {
  padding: 20px;
}

.manage-users-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.add-user-button {
  padding: 6px 12px;
  background-color: #aaa;
  color: white;
  border: none;
  border-radius: 4px;
}

.user-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.user-table th,
.user-table td {
  border: 1px solid #ccc;
  padding: 10px;
}

.action-button,
.delete-button {
  margin-left: 10px;
}

.delete-button {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 6px 10px;
  border-radius: 4px;
}



package com.customersupportticketsystem.controller;

import com.customersupportticketsystem.entity.User;
import com.customersupportticketsystem.entity.Role;
import com.customersupportticketsystem.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/users")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    // ✅ GET: All users
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        return ResponseEntity.ok(userRepository.findAll());
    }

    // ✅ PUT: Update roles for a user
    @PutMapping("/{userId}/roles")
    public ResponseEntity<String> updateUserRoles(
            @PathVariable Long userId,
            @RequestBody Set<Role> newRoles) {

        Optional<User> optionalUser = userRepository.findById(userId);
        if (optionalUser.isEmpty()) {
            return ResponseEntity.notFound().build();
        }

        User user = optionalUser.get();
        user.setRoles(newRoles);
        userRepository.save(user);

        return ResponseEntity.ok("Roles updated successfully");
    }

    // ✅ DELETE: Delete a user
    @DeleteMapping("/{userId}")
    public ResponseEntity<String> deleteUser(@PathVariable Long userId) {
        if (!userRepository.existsById(userId)) {
            return ResponseEntity.notFound().build();
        }

        userRepository.deleteById(userId);
        return ResponseEntity.ok("User deleted successfully");
    }
}